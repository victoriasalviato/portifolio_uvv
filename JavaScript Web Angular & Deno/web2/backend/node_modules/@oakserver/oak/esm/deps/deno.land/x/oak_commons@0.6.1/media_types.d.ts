/** A class which encapsulates the information in a media type, allowing
 * inspecting of modifying individual parts of the media type. */
export declare class MediaType {
    #private;
    /** Create an instance of {@linkcode MediaType} by providing the components
     * of `type`, `subtype` and optionally a `suffix`. */
    constructor(type: string, subtype: string, suffix?: string);
    /** The subtype of the media type. */
    set subtype(value: string);
    /** The subtype of the media type. */
    get subtype(): string;
    /** The optional suffix of the media type. */
    set suffix(value: string | undefined);
    /** The optional suffix of the media type. */
    get suffix(): string | undefined;
    /** The type of the media type. */
    set type(value: string);
    /** The type of the media type. */
    get type(): string;
    /** Return the parsed media type in its valid string format. */
    toString(): string;
    /** Take a string and attempt to parse it into a {@linkcode MediaType}
     * object. */
    static parse(value: string): MediaType;
}
/** Determines if the provided media type matches one of the supplied media
 * types. If there is a match, the matched media type is returned, otherwise
 * `undefined` is returned.
 *
 * Each type in the media types array can be one of the following:
 *
 * - A file extension name such as `json`. This name will be returned if
 *   matched.
 * - A media type such as `application/json`.
 * - A media type with a wildcard such as `*​/*` or `*​/json` or `application/*`.
 *   The full media type will be returned if matched.
 * - A suffix such as `+json`. This can be combined with a wildcard such as
 *   `*​/vnd+json` or `application/*+json`. The full mime type will be returned
 *   if matched.
 * - Special cases of `urlencoded` and `multipart` which get normalized to
 *   `application/x-www-form-urlencoded` and `multipart/*` respectively.
 */
export declare function matches(value: string, mediaTypes: string[]): string | undefined;
export declare function format(value: {
    type: string;
    subtype: string;
    suffix?: string;
}): string;
/** Parses a media type into a {@linkcode MediaType} object which provides
 * parts of the media type as individual properties. */
export declare function parse(value: string): MediaType;
