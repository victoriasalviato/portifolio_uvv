// Copyright 2018-2024 the oak authors. All rights reserved. MIT license.
import * as dntShim from "./_dnt.shims.js";
class ErrorEvent extends Event {
    #message;
    #filename;
    #lineno;
    #colno;
    // deno-lint-ignore no-explicit-any
    #error;
    get message() {
        return this.#message;
    }
    get filename() {
        return this.#filename;
    }
    get lineno() {
        return this.#lineno;
    }
    get colno() {
        return this.#colno;
    }
    // deno-lint-ignore no-explicit-any
    get error() {
        return this.#error;
    }
    constructor(type, eventInitDict = {}) {
        super(type, eventInitDict);
        const { message = "error", filename = "", lineno = 0, colno = 0, error } = eventInitDict;
        this.#message = message;
        this.#filename = filename;
        this.#lineno = lineno;
        this.#colno = colno;
        this.#error = error;
    }
}
if (!("ErrorEvent" in dntShim.dntGlobalThis)) {
    Object.defineProperty(dntShim.dntGlobalThis, "ErrorEvent", {
        value: ErrorEvent,
        writable: true,
        enumerable: false,
        configurable: true,
    });
}
if (!("ReadableStream" in dntShim.dntGlobalThis) || !("TransformStream" in dntShim.dntGlobalThis)) {
    (async () => {
        const { ReadableStream, TransformStream } = await import("stream/web");
        Object.defineProperties(dntShim.dntGlobalThis, {
            "ReadableStream": {
                value: ReadableStream,
                writable: true,
                enumerable: false,
                configurable: true,
            },
            "TransformStream": {
                value: TransformStream,
                writable: true,
                enumerable: false,
                configurable: true,
            },
        });
    })();
}
