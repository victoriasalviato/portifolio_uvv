/**
 * A middleware framework for handling HTTP with Deno.
 *
 * oak works well on both Deno CLI and Deno deploy, and is inspired by
 * [koa](https://koajs.com/). It works well with both the Deno CLI and
 * [Deno Deploy](https://deno.com/deploy).
 *
 * ### Example server
 *
 * A minimal router server which responds with content on `/`. With Deno CLI
 * this will listen on port 8080 and on Deploy, this will simply serve requests
 * received on the application.
 *
 * ```ts
 * import { Application, Router } from "https://deno.land/x/oak/mod.ts";
 *
 * const router = new Router();
 * router.get("/", (ctx) => {
 *   ctx.response.body = `<!DOCTYPE html>
 *     <html>
 *       <head><title>Hello oak!</title><head>
 *       <body>
 *         <h1>Hello oak!</h1>
 *       </body>
 *     </html>
 *   `;
 * });
 *
 * const app = new Application();
 * app.use(router.routes());
 * app.use(router.allowedMethods());
 *
 * app.listen({ port: 8080 });
 * ```
 *
 * @module
 */
export { Application, type ApplicationOptions, type ListenOptions, type ListenOptionsBase, type ListenOptionsTls, type State, } from "./application.js";
export type { BodyType } from "./body.js";
export { Context, type ContextSendOptions } from "./context.js";
export * as helpers from "./helpers.js";
export * as etag from "./etag.js";
export { Server as HttpServerNative } from "./http_server_native.js";
export { type NativeRequest } from "./http_server_native_request.js";
export { proxy } from "./middleware/proxy.js";
export type { ProxyOptions } from "./middleware/proxy.js";
export { route, RouteContext, serve, ServeContext, } from "./middleware/serve.js";
export { compose as composeMiddleware } from "./middleware.js";
export type { Middleware, MiddlewareObject, MiddlewareOrMiddlewareObject, Next, } from "./middleware.js";
export { type ByteRange, ifRange, MultiPartStream, parseRange, } from "./range.js";
export { Request } from "./request.js";
export { REDIRECT_BACK, Response } from "./response.js";
export { type Route, type RouteParams, Router, type RouterAllowedMethodsOptions, type RouterContext, type RouterMiddleware, type RouterOptions, type RouterParamMiddleware, } from "./router.js";
export { send, type SendOptions } from "./send.js";
/** Utilities for making testing oak servers easier. */
export * as testing from "./testing.js";
export { type ServerConstructor } from "./types.js";
export { createHttpError, errors as httpErrors, type ErrorStatus, HttpError, type HTTPMethods, isErrorStatus, isHttpError, isRedirectStatus, type RedirectStatus, SecureCookieMap as Cookies, type SecureCookieMapGetOptions as CookiesGetOptions, type SecureCookieMapSetDeleteOptions as CookiesSetDeleteOptions, ServerSentEvent, type ServerSentEventInit, type ServerSentEventTarget, Status, STATUS_TEXT, } from "./deps.js";
