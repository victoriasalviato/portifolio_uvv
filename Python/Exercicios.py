# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qNj_przh5rxG5E5pCHp3-6nHVNXf0Obh
"""

import numpy as np

dataset1 = np.load('dataset1.npy')
dataset1[:, :]

print(f'INDICE DOS 2 PRIMEIROS FUNCIONARIOS:\n')

for indice, funcionario in enumerate(dataset1[:2]):
  print(f'DESENVOLVEDOR {indice + 1}:')
  print(f'Matricula: {funcionario[0]: .0f}')
  print(f'Salario Bruto: {funcionario[1]: .2f}')
  print(f'Plano de Saude: [1]SIM ou [0]NÃO = {funcionario[2]: .0f}')
  print(f'Quantidade de Dependentes: {funcionario[3]: .0f}\n')

salario_minimo = 1112.0
salarios = dataset1[:, 1] / salario_minimo
ranking = list(enumerate(salarios, start=1))
ranking.sort(key=lambda x: x[1])

print(f'5 SALARIO MAIS ALTOS:')

for i, salarios in ranking[:5]:
  print(f"{i}. Valor Recebido: {dataset1[i-1, 1]: .2f} reais   -> Correspondente a {salarios: .2f} salarios minimos")

print(f'\n5 SALARIOS MAIS BAIXOS:')

for i, salarios in ranking[-5:]:
  print(f"{i}. Valor Recebido: {dataset1[i-1, 1]: .2f} reais   -> Correspondente a {salarios: .2f} salarios minimos")

salario_bruto = dataset1[:, 1]
amplitude = np.max(salario_bruto) - np.min(salario_bruto)
salario_minimo = 1112.0
salarios = salario_bruto / salario_minimo
amplitude_ = np.max(salarios) - np.min(salarios)


print(f'Amplitude Salarial: {amplitude: .2f} reais   -> Correspondente a {amplitude_: .2f} salarios minimos')

salario_bruto = dataset1[:, 1]
salario_minimo = 1112.0
salarios = salario_bruto / salario_minimo
indice = np.argsort(salarios)[-100:]
media = np.mean(salarios[indice])

print(f'Media Salarial dos 100 mais bem Pagos: {media: .2f} salarios minimos')

salario_bruto = dataset1[:, 1]
plano = dataset1[:, 2]
dependentes = dataset1[:, 3]

for i in range(len(dataset1)):
  if plano[i] == 1:
    salario_bruto[i] *= 0.98

  salario_bruto[i] *= (1 + dependentes[1] / 100)

folha = np.sum(salario_bruto)

print(f'Folha de Pagamento Total: {folha: .2f} reais')

salario_bruto = dataset1[:, 1]
atual = np.sum(salario_bruto)

for i in range(len(dataset1)):
  salario_novo = salario_bruto
  salario_novo[i] *= 1.07

novo = np.sum(salario_novo)
aumento = novo - atual

print(f'Aumento Injetado na Economia Capixaba: {aumento: .2f} reais')

dataset2 = np.load('dataset2.npy')
dataset2

print(f'INDICE DOS 2 PRIMEIROS ENTREVISTADOS:\n')

for indice, entrevistado in enumerate(dataset2[:2]):
  print(f'ENTREVISTADO {indice + 1}:')
  print(f'Codigo: {entrevistado[0]: .0f}')
  print(f'Massa: {entrevistado[1]: .2f}kg')
  print(f'Altura: {entrevistado[2]: .2f}m')
  print(f'Sedentario: [1]SIM ou [0]NAO = {entrevistado[3]: .0f}\n')

altura = dataset2[:, 2]
indice = np.argsort(altura)[-200:]
media = np.mean(altura[indice])

print(f'Media dos 200 Mais Altos: {media: .2f}m')

sedentario = np.sum(dataset2[:, 3] == 1)
naosedentario = np.sum(dataset2[:, 3] == 0)
total = len(dataset2)
porcentagem_sedentario = (sedentario / total) * 100
porcentagem_naosedentario = (naosedentario / total) * 100

print(f'QUANTIDADE ABSOLUTA:')
print(f'Sedentarios: {sedentario: .2f} pessoas')
print(f'Nao Sedentarios: {naosedentario: .2f} pessoas\n')
print(f'PORCENTAGEM:')
print(f'Sedentarios: {porcentagem_sedentario: .2f}%')
print(f'Nao Sedentarios: {porcentagem_naosedentario: .2f}%')

massa = dataset2[:, 1]
altura = dataset2[:, 2]
imc = massa / altura**2
total = len(dataset2)
saudavel = np.sum((imc >= 18.5) & (imc <= 25.0))
porcentagem = (saudavel / total) * 100

print(f'QUANTIDADE DE ENTREVISTADO COM IMC SAUDAVEL:')
print(f'Total: {saudavel: .2f} pessoas')
print(f'Porcentagem: {porcentagem: .2f}%')

sedentarismo = dataset2[:, 3]
massa = dataset2[:, 1]
altura = dataset2[:, 2]
imc = massa / altura**2
sedentarios = np.mean(imc[sedentarismo == 1])
naosedentarios = np.mean(imc[sedentarismo == 0])

print(f'MEDIA DO IMC DOS ENTREVISTADOS:')
print(f'Sedentarios: {sedentarios: .2f}')
print(f'Nao Sedentarios: {naosedentarios: .2f}')

codigo = dataset2[:,0]
massa = dataset2[:, 1]
altura = dataset2[:, 2]
imc = massa / altura**2
entrevistados = list(zip(dataset2[:, 0], imc))
entrevistados.sort(key=lambda x:x[1])

print(f'ENTREVISTADOS MAIS MAGROS:')

for codigo, imc in entrevistados[:50]:
  if imc <= 18.5:
    print(f'Codigo: {int(codigo)}')
    print(f'IMC: {imc: .2f}')

print(f'\nENTREVISTADOS MAIS OBESOS:')

for codigo, imc in entrevistados[-100:]:
  if imc >= 25.0:
    print(f'Codigo: {int(codigo)}')
    print(f'IMC: {imc: .2f}')

dataset3 = np.load('dataset3.npy')
dataset3

valor = dataset3[:, 1]
limites = [0, 100, 500, 1000, np.inf]
nomes = ['Bronze', 'Prata', 'Ouro', 'Diamante']
planos = np.digitize(valor, bins=limites, right=True)
quantidade = [np.sum(planos == i) for i in range(1, len(limites))]
clientes = len(dataset3)
porcentagem = [total / clientes * 100 for total in quantidade]

for N, Q, P in zip(nomes, quantidade, porcentagem):
  print(f'Plano {N}: {Q} Clientes  ->  {P: .2f}%')

valor = dataset3[:, 1]
limites = [0, 100, 500, 1000, np.inf]
nomes = ['Bronze', 'Prata', 'Ouro', 'Diamante']
planos = np.digitize(valor, bins=limites, right=True)
custo = [(np.sum(planos == i) * 3.87) for i in range(1, len(limites))]
clientes = len(dataset3)
total = (np.sum(clientes) * 3.87)

for N, C in zip(nomes, custo):
  print(f'Plano {N}: {C: .2f} reais')

print(f'Custo Total: {total: .2f} reais')

valor = dataset3[:, 1]
sexo = dataset3[:, 2]
homem = valor[sexo == 0]
mulher = valor[sexo == 1]
media_homem = np.mean(homem)
media_mulher = np.mean(mulher)
maximo_homem = np.max(homem)
maximo_mulher = np.max(mulher)
minimo_homem = np.min(homem)
minimo_mulher = np.min(mulher)

print(f'GASTOS SEXO MASCULINO:')
print(f'Maximo: {maximo_homem: .2f} reais')
print(f'Minimo: {minimo_homem: .2f} reais')
print(f'Media: {media_homem: .2f} reais\n')
print(f'GASTOS SEXO FEMININO:')
print(f'Maximo: {maximo_mulher: .2f} reais')
print(f'Minimo: {minimo_mulher: .2f} reais')
print(f'Media: {media_mulher: .2f} reais')

valor = dataset3[:, 1]
pagamento = dataset3[:, 3]
debito = valor[pagamento == 0]
credito = valor[pagamento == 1]
media_debito = np.mean(debito)
media_credito = np.mean(credito)
maximo_debito = np.max(debito)
maximo_credito = np.max(credito)
minimo_debito = np.min(debito)
minimo_credito = np.min(credito)

print(f'GASTOS PAGAMENTO NO DEBITO:')
print(f'Maximo: {maximo_debito: .2f} reais')
print(f'Minimo: {minimo_debito: .2f} reais')
print(f'Media: {media_debito: .2f} reais\n')
print(f'GASTOS PAGAMENTO NO CREDITO:')
print(f'Maximo: {maximo_credito: .2f} reais')
print(f'Minimo: {minimo_credito: .2f} reais')
print(f'Media: {media_credito: .2f} reais')

limites = [ 100, 500, 1000, np.inf]
planos = ['Bronze', 'Prata', 'Ouro', 'Diamante']
dataset3 = np.insert(dataset3, 2, 0, axis=1)

for i, lim in enumerate(limites[1:], start=1):
  dataset3[(dataset3[:, 1] > limites[i-1]) & (dataset3[:, 1] <= lim), 2] = i

maximo = [0] * len(planos)
minimo = [float('inf')] * len(planos)
somas = [0] * len(planos)
contadores = [0] * len(planos)

for i, plano in enumerate(planos):
  valores = dataset3[dataset3[:, 2] == i, 1]

  if len(valores) > 0:
    maximo[i] = np.max(valores)
    minimo[i] = np.min(valores)
    somas[i] = np.sum(valores)
    contadores[i] = len(valores)

for i, plano in enumerate(planos):
  media = somas[i] / contadores[i] if contadores[i] > 0 else 0

  print(f'GASTOS PELO PLANO: {plano}')
  print(f'Maximo: {maximo[i]: .2f} reais')
  print(f'Minimo: {minimo[i]: .2f} reais')
  print(f'Media: {media: .2f} reais\n')

dataset4 = np.load('dataset4.npy')
dataset4[:]

print(f'BOLETIM DOS 2 PRIMEIROS ALUNOS:\n')

for indice, aluno in enumerate(dataset4[:2]):
  print(f'ALUNO {indice + 1}:')
  print(f'Matricula: {aluno[0]: .0f}')
  print(f'Nota Primeiro Bimestre: {aluno[1]: .2f}')
  print(f'Nota Segundo Bimestre: {aluno[2]: .2f}\n')

def media_semestre(bimestre1, bimestre2):
    return (bimestre1 + bimestre2) / 2

def media_final(media_semestre, prova):
    return (media_semestre + prova) / 2

def menu():
    print(f'Menu:')
    print(f'1. Pesquisar Matricula: ')
    print(f'2. Sair')

    return int(input(f'Escolha uma opção: '))

def pesquisa(matricula):
    index = np.where(dataset4[:, 0] == matricula)[0]

    if len(index) > 0:
        dados = dataset4[index][0]
        bimestre1 = dados[1]
        bimestre2 = dados[2]

        print(f'DADOS DO ALUNO:')
        print(f'Matricula: {matricula:.0f}')
        print(f'Nota Primeiro Bimestre: {bimestre1:.2f}')
        print(f'Nota Segundo Bimestre: {bimestre2:.2f}')

        mediasemestre = media_semestre(bimestre1,bimestre2)

        print(f'Media do Semestre: {mediasemestre:.2f}')

        if mediasemestre <= 6.9:
            print(f'ALUNO DE RECUPERACAO')

            prova = float(input(f'Nota da Prova Final: '))
            final = media_final(mediasemestre, prova)

            print(f'Media Final: {final:.2f}')

            if final >= 5:
                print(f'ALUNO APROVADO')

            else:
                print(f'ALUNO REPROVADO')
        else:
            print(f'ALUNO APROVADO')

    else:
        print(f'Matricula Invalida. Insira uma Matricula Valida.')

while True:
    try:
        opcao = menu()

        if opcao == 1:
            pesquise = input(f'Digite a Matricula: ')
            pesquisa(float(pesquise))

        elif opcao == 2:
            break

        else:
            print(f'Opcao Invalida. Insira uma opcao valida.')

    except ValueError:
        print('ERROR')

bimestre1 = dataset4[:, 1]
bimestre2 = dataset4[:, 2]

def media(bimestre1, bimestre2):
  return (bimestre1 + bimestre2) / 2

while True:
  try:
    insercao = float(input(f'Digite a Sua Media: '))

    if 0 <= insercao <= 10:
      break

    else:
      print(f'Media Invalida. Favor Inserir um Valor Valido.')

  except ValueError:
    print(f'ERROR')

semestre = media(bimestre1, bimestre2)
alunos = dataset4[semestre >= insercao]
porcentagem = (len(alunos) / len(dataset4)) * 100

print(f'Quantidade de Alunos com Media Igual ou Maior: {len(alunos)}')
print(f'Porcentagem de Alunos com Media Igual ou Maior: {porcentagem: .2f}%')

def menu():
  print(f'MENU')
  print(f'1. Pesquisar Matricula;')
  print(f'2. Sair')

  return int(input(f'Escolha Uma Opcao[1/2]: '))

def pesquisa(matricula):
  index = np.where(dataset4[:, 0] == matricula)[0]

  if len(index) > 0:
    dados = dataset4[index][0]
    bimestre1 = dados[1]
    bimestre2 = dados[2]

    print(f'DADOS DO ALUNO:')
    print(f'Matricula: {matricula: .0f}')
    print(f'Nota Primeiro Bimestre: {bimestre1: .2f}')
    print(f'Nota Segundo Bimestre: {bimestre2: .2f}')

  else:
    print(f'Matricula Invalida. Favor inserir Matricula valida.')

while True:
  try:
    opcao = menu()

    if opcao == 1:
      pesquise = input(f'Insira o numero de Matricula: ')
      pesquisa(float(pesquise))

    elif opcao == 2:
      break

    else:
      print(f'Opcao Invalida. Favor Inserir uma Opcao valida.')

  except ValueError:
    print(f'ERROR')

dataset6 = np.load('dataset6.npy')
dataset6[:]

acessos = dataset6[:, 1]
ranking = list(enumerate(acessos, start=1))
ranking.sort(key=lambda x: x[1])

print(f'10 PERFIS COM MAIS ACESSOS:')

for i, acessos in ranking[-10:]:
  print(f'Codigo: {dataset6[i-1, 0]: .0f}')

import numpy as np

tempo = dataset6[:, 1]
amplitude = np.max(tempo) - np.min(tempo)
Q1 = np.min(tempo) + amplitude / 4
Q2 = np.min(tempo) + amplitude / 2
Q3 = np.min(tempo) + 3 * amplitude / 4
nomes = ['Quartil 1', 'Quartil 2', 'Quartil 3']
divisoes = [Q1, Q2, Q3, np.max(tempo)]
quartis = np.digitize(tempo, bins=divisoes, right=True)
resposta = [np.mean(quartis == i) for i in range(1, len(divisoes))]

for N, R in zip(nomes, resposta):
    print(f'{N}: {R:.2%}')